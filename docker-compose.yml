
services:
  postgres:
    image: postgres:14.0-alpine3.14
    container_name: "postgres"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: gambling-db
    ports:
      - "5432:5432"

  backend:
    image: spring-backend:latest
    container_name: spring-backend


    environment:
      - SPRING_PROFILES_ACTIVE = dev
    ports:
      - "8080:8080"
#  frontend:
#    image: react-frontend:latest
#    container_name: react-frontend
#    ports:
#      - "3000:3000"

  h2:
       container_name: h2_db
       image: oscarfonts/h2
       ports:
         - 9092:9092
       environment:
         - H2_TCP_PORT=9092
         - H2_WEB_PORT=8082



# version: "3"
# services:
#   postgres:
#     image: postgres:latest
#     network_mode: bridge
#     container_name: postgres
#     volumes:
#       - postgres-data:/var/lib/postgresql/data
#     expose:
#       - 5432
#     ports:
#       - 5432:5432
#     environment:
#       - POSTGRES_PASSWORD=1234
#       - POSTGRES_USER=postgres
#       - POSTGRES_DB=gambling-db
#     restart: unless-stopped
#   # APP*****************************************
#   springbootapp:
#     build:
#       context: ./back-end
#       dockerfile: Dockerfile
#     environment:
#         - SPRING_PROFILES_ACTIVE=dev
#     expose:
#       - 8080
#     ports:
#       - 8080:8080
#     restart: unless-stopped
#     depends_on:
#       - postgres
#     links:
#       - postgres
# volumes:
#   postgres-data:


# #  db:
# #    container_name: postgres
# #    image: postgres:14.1
# #    environment:
# #      POSTGRES_USER: postgres
# #      POSTGRES_PASSWORD: 1234
# #      PGDATA: /data/postgres
# #
# #    volumes:
# #      - db:/data/postgres
# #    ports:
# #      - "5332:5432"
# #    networks:
# #      - db
# #    restart: unless-stopped
# #
# #
